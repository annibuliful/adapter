{"mappings":";;AAAA;ACAA;;;ADKO,MAAM,4CAAS,CAAC,SAAiB,QAAa,yCAAO,GAAK;IAC7D,kDAAkD;IAClD,6DAA6D;IAC7D,MAAM,OAAO,GAAG;IAChB,MAAM,MAAM,CAAC;IACb,MAAM,SAAS;AACnB;AAEO,MAAM;IAET,OAAO,IAAI,QAAa,CAAC,CAAC,EAAU;QAAE,OAAO;IAAG;IAChD,OAAO,MAAM,QAAa,CAAC,CAAC,EAAU;QAAE,OAAO;IAAG;AACtD;AAEO,MAAM,kDAAgB;IACzB,OAAO,QAAQ,0CAAW;IAG1B,OAAO,OAAO,OAAe,EAAQ;QACjC,qEAAqE;QACrE,8CAA8C;QAC9C,eAAe,MAAM,CAAC,SAAS,IAAI;IACvC;IAEA,OAAO,UAAU,KAAW,EAAQ;QAChC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAG;QAClB,CAAA,GAAA,oCAAQ,AAAD,CAAC,CAAC;QACT,EAAE,IAAI,CAAC,OAAO,CAAC;YACX,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO;SAC3B,CAAC;IACN;IAEA,OAAO,SAAS,KAAqB,EAAQ;QACzC,IAAI,OAAO,SAAS,UAAU;YAC1B,CAAA,GAAA,oCAAQ,AAAD,CAAC,CAAC;YACT,EAAE,IAAI,CAAC,OAAO,CAAC;gBACX,EAAE,MAAM;aACX,CAAC;YACF;QACJ,CAAC;QAED,CAAA,GAAA,oCAAQ,AAAD,CAAC,CAAC;QACT,EAAE,IAAI,CAAC,OAAO,CAAC;YACX,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO;SAC7B,CAAC;IACN;IAEA,OAAO,WAAW,MAAc,EAAE,KAAqB,EAAQ;QAC3D,IAAI,OAAO,SAAS,UAChB,CAAA,GAAA,oCAAO,CAAC,CAAC;YACT,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO;gBACrB,EAAE,MAAM;aACX,CAAC;aACC,IAAI,OAAO,SAAS,UACvB,CAAA,GAAA,oCAAO,CAAC,CAAC;YACT,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO;gBACrB,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO;aAC7B,CAAC;IAEV;IAKA,aAAc;QACV,KAAK;QACL,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW;IAClC;IAEA,SAAS,KAAW,EAAQ;QACxB,IAAI;QACJ,IAAI,OAAO,SAAS,UAChB,YAAY,CAAA,GAAA,UAAE,CAAC,CAAC,EAAE,MAAM,CAAC;aACtB,IAAI,OAAO,SAAS,UACvB,YAAY,CAAA,GAAA,UAAG,AAAD,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;QAEtD,YAAY,CAAA,GAAA,SAAC,KAAK,IAAI,CAAC,SAAS,EAAE;QAClC,IAAI,CAAC,SAAS,GAAG;IACrB;IAEA,OAAO,IAAY,EAAE,OAAe,EAAE;QAClC,MAAM,QAAQ,IAAI,YAAY,MAAM;QACpC,IAAI,CAAC,aAAa,CAAC;IACvB;AACJ","sources":["src/adapter.ts","src/add-style.ts"],"sourcesContent":["import { css, cx } from \"@emotion/css\";\nimport { addStyle } from \"./add-style\";\n\nexport { addStyle };\n\nexport const define = (tagName: string, Class: any = Adapter) => {\n    // Order of this function belows are very crucial.\n    // Class state must be defined before `customElements.define`\n    Class.tagName = tagName;\n    Class.define(tagName);\n    Class.initStyle();\n}\n\nexport class StyleClass {\n    static readonly default: object;\n    static css(style: any = {}): string { return '' };\n    static style(style: any = {}): string { return '' };\n}\n\nexport class Adapter extends HTMLElement {\n    static Style = StyleClass;\n    static tagName: string;\n    \n    static define(tagName: string): void {\n        // To extends this function, sub-elements must be defined before call\n        // this function as `super.onDefine(tagName);`\n        customElements.define(tagName, this);\n    };\n\n    static initStyle(style?: any): void {\n        if (!this.Style) {return};\n        addStyle`\n        ${this.tagName} {\n            ${this.Style.css(style)}\n        }`;\n    };\n\n    static tagStyle(style?: string|Object): void {\n        if (typeof style == \"string\") {\n            addStyle`\n            ${this.tagName} {\n                ${style}\n            }`;\n            return;\n        }\n\n        addStyle`\n        ${this.tagName} {\n            ${this.Style.style(style)}\n        }`;\n    }\n\n    static classStyle(class_: string, style?: string|Object): void {\n        if (typeof style == \"string\") {\n            addStyle`\n            ${this.tagName}.${class_} {\n                ${style}\n            }`;\n        } else if (typeof style == \"object\") {\n            addStyle`\n            ${this.tagName}.${class_} {\n                ${this.Style.style(style)}\n            }`;\n        };\n    }\n\n    styleClass: string; // store style class name;\n    _class: any | Adapter; // store class to access static props.\n    \n    constructor() {\n        super();\n        this._class = this.constructor;\n    }\n\n    addStyle(style?: any): void {\n        let className;\n        if (typeof style == 'string') {\n            className = css`${style}`;\n        } else if (typeof style == \"object\") {\n            className = css`${this._class.Style.style(style)}`;\n        };\n        className = cx(...this.classList, className);\n        this.className = className;\n    }\n\n    notify(name: string, options: object) {\n        const event = new CustomEvent(name, options);\n        this.dispatchEvent(event);\n    }\n}","export { injectGlobal as addStyle } from '@emotion/css';"],"names":[],"version":3,"file":"adapter.js.map"}