{"mappings":"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","sources":["src/adapter.ts"],"sourcesContent":["import { injectGlobal as addStyle } from \"@emotion/css\";\n\nexport { addStyle };\n\nexport const define = (tagName: string, Class: any = Adapter) => {\n    Class.define(tagName);\n}\n\nexport class StyleClass {\n    static readonly default: object;\n    static css(style: Object = {}): string { return '' };\n    static style(style: Object = {}): string { return '' };\n}\n\nexport class Adapter extends HTMLElement {\n    static Style = StyleClass;\n    static _tagName: string;\n\n    static get tagName() {\n        if (!this._tagName) {\n            throw `${this.name} hasn't been defined a tag name`;\n        }\n        return this._tagName;\n    }\n\n    static set tagName(tagName) {\n        this._tagName = tagName;\n    }\n    \n    static define(tagName: string): void {\n        // To extends this function, sub-elements must be defined before call\n        // this function as `super.define(tagName);`\n        try {\n            customElements.define(tagName, this);\n        } catch (error) {\n            if (error instanceof DOMException) {\n                console.error(\n                    `DOMException: '${this.name}' ` +\n                    `has already been defined to tag '${this.tagName}'\\n` +\n                    `${error.stack}`\n                );\n                return;\n            }\n        }\n        this.tagName = tagName;\n        this.initStyle();\n    };\n\n    static initStyle(): void {\n        addStyle`\n        ${this.tagName} {\n            all: unset;\n        }`;\n\n        if (!this.Style) {return};\n\n        addStyle`\n        ${this.tagName} {\n            ${this.Style.css()}\n        }`;\n    };\n\n    static tagStyle(style: string | Object): void {\n        if (typeof style == \"string\") {\n            addStyle`\n            ${this.tagName} {\n                ${style}\n            }`;\n            return;\n        }\n\n        addStyle`\n        ${this.tagName} {\n            ${this.Style.style(style)}\n        }`;\n    }\n\n    static classStyle(class_: string, style: string | Object): void {\n        if (typeof style == \"string\") {\n            addStyle`\n            ${this.tagName}.${class_} {\n                ${style}\n            }`;\n        } else if (typeof style == \"object\") {\n            addStyle`\n            ${this.tagName}.${class_} {\n                ${this.Style.style(style)}\n            }`;\n        };\n    }\n\n    static readonly max_id = Math.pow(16, 4) - 1;\n    static instance = {};\n    static _generate_id() {\n        return `adt-${Math.floor(Math.random() * this.max_id).toString(16)}`;\n    }\n\n    _class: any | Adapter; // store class to access static props.\n    _id: string; // instance id.\n    \n    constructor() {\n        super();\n        this._class = this.constructor;\n        let id = this._class._generate_id();\n        while (id in this._class.instance) {\n            id = this._class._generate_id();\n        }\n        this._class.instance[id] = true;\n        this._id = id;\n    }\n\n    addStyle(style: string | Object): void {\n        this.classList.add(this._id);\n        let selector = this.classList.value.replace(/ /g, '.');\n        if (typeof style == \"string\") {\n            addStyle`\n            ${this.tagName}.${selector} {\n                ${style}\n            }`;\n        } else if (typeof style == \"object\") {\n            addStyle`\n            ${this.tagName}.${selector} {\n                ${this._class.Style.style(style)}\n            }`;\n        };\n    }\n\n    notify(name: string, options?: object) {\n        const event = new CustomEvent(name, options);\n        this.dispatchEvent(event);\n    }\n}"],"names":[],"version":3,"file":"adapter.js.map"}